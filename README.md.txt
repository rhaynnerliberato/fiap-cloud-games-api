# Fiap Cloud Games - Documenta√ß√£o do Projeto

## üåü Objetivo do Projeto

Este √© um sistema de backend RESTful voltado para uma plataforma de gerenciamento de jogos na nuvem, chamada **Fiap Cloud Games**. A API permite opera√ß√µes de CRUD para usu√°rios e jogos, autentica√ß√£o de usu√°rio e funcionalidades adicionais como avalia√ß√£o de jogos.

Foi desenvolvida em .NET 6 com MongoDB, utilizando boas pr√°ticas como inje√ß√£o de depend√™ncia, TDD e arquitetura em camadas (Controller, Service, Repository, Domain).

---

## üöÄ Tecnologias Utilizadas

* .NET 6
* MongoDB
* AutoMapper
* xUnit
* Moq
* Swagger (Swashbuckle)
* Docker (opcional)

---

## üìÇ Estrutura do Projeto

```
fiap-cloud-games-api/
|-- Controllers/
|-- Domain/
|   |-- Entities/
|   |-- Enums/
|   |-- Interfaces/
|-- Models/
|   |-- Requests/
|   |-- Responses/
|-- Repositories/
|-- Services/
|-- Tests/
|   |-- Services/
|-- Program.cs
|-- appsettings.json
```

---

## üîß Como Executar o Projeto

### 1. Clone o reposit√≥rio

```bash
git clone https://github.com/seu-usuario/fiap-cloud-games-api.git
cd fiap-cloud-games-api
```

### 2. Configure o `appsettings.json`

```json
{
  "MongoDbSettings": {
    "ConnectionString": "mongodb://localhost:27017",
    "DatabaseName": "FiapCloudGamesDB"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}
```

### 3. Execute a aplica√ß√£o

```bash
dotnet run
```

A aplica√ß√£o estar√° dispon√≠vel em: `https://localhost:5001`

### 4. Acesse a documenta√ß√£o Swagger

```
https://localhost:5001/swagger
```

---

## üìÑ Endpoints Dispon√≠veis

### Usu√°rios

* POST `/api/usuarios` - Cadastrar novo usu√°rio
* GET `/api/usuarios` - Listar todos os usu√°rios
* GET `/api/usuarios/{id}` - Buscar por ID
* PUT `/api/usuarios/{id}` - Atualizar dados
* DELETE `/api/usuarios/{id}` - Deletar usu√°rio
* POST `/api/usuarios/login` - Login/autentica√ß√£o

### Jogos

* POST `/api/jogos` - Cadastrar novo jogo
* GET `/api/jogos` - Listar todos os jogos
* GET `/api/jogos/{id}` - Buscar por ID
* PUT `/api/jogos/{id}` - Atualizar dados
* DELETE `/api/jogos/{id}` - Deletar jogo
* POST `/api/jogos/{id}/avaliar` - Avaliar jogo (TDD)

---

## üîÆ TDD Aplicado

Implementamos TDD no m√≥dulo de **avalia√ß√£o de jogo**, com o ciclo cl√°ssico:

1. Criamos o teste primeiro (`JogoServiceTests.AvaliarAsync_...`).
2. Implementamos o m√©todo `AvaliarAsync` no `JogoService`.
3. Garantimos que o teste passasse.
4. Refatoramos a l√≥gica e confirmamos a manuten√ß√£o dos testes.

---

## ‚úÖ Testes Unit√°rios

Os testes est√£o localizados em:

```
Tests/Services/
```

Exemplos de testes implementados:

* `UsuarioServiceTests`

  * CadastrarAsync\_ValidRequest\_ReturnsResponse
  * AutenticarAsync\_UsuarioExiste\_RetornaUsuario
  * ObterPorIdAsync\_UsuarioExiste\_RetornaUsuarioResponse
  * AtualizarAsync\_UsuarioNaoExiste\_RetornaNull
  * DeletarAsync\_UsuarioExiste\_DeletaRetornaTrue

* `JogoServiceTests`

  * CadastrarAsync\_DeveRetornarJogo
  * ObterTodosAsync\_DeveRetornarListaJogos
  * AvaliarAsync\_JogoExiste\_AvaliacaoValida\_DeveSalvarNota

Para rodar os testes:

```bash
dotnet test
```

---

## üöß Melhorias Futuras

* Autentica√ß√£o via JWT
* Filtros de jogos por pre√ßo, categoria ou avalia√ß√£o
* Upload de imagem para capa do jogo
* Painel admin

---

## üë®‚Äçüíª Desenvolvedor

**Rhaynner Liberato**